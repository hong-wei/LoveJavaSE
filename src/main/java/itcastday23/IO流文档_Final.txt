IO流：

输入流：
输出流：

字节流：
字符流：为了处理文字数据方便而出现的对象。
		其实这些对象的内部使用的还是字节流(因为文字最终也是字节数据)
		只不过，通过字节流读取了相对应的字节数，没有对这些字节直接操作。
		而是去查了指定的(本机默认的)编码表，获取到了对应的文字。
		
		简单说：字符流就是 ： 字节流+编码表。
	
	-----------------------
	
缓冲区：提高效率的，提高谁的效率？提高流的操作数据的效率。
		所以创建缓冲区之前必须先有流。
	缓冲区的基本思想：其实就是定义容器将数据进行临时存储。
	对于缓冲区对象，其实就是将这个容器进行了封装，并提供了更多高效的操作方法。
	
缓冲区可以提高流的操作效率。

其实是使用了一种设计思想完成。设计模式：装饰设计模式。

Writer
	|--TextWriter
	|--MediaWriter
现在要对该体系中的对象进行功能的增强。增强的最常见手段就是缓冲区。
先将数据写到缓冲区中，再将缓冲区中的数据一次性写到目的地。

按照之前学习过的基本的思想，那就是对对象中的写方法进行覆盖。
产生已有的对象子类，复写write方法。不往目的地写，而是往缓冲区写。

所以这个体系会变成这样。
Writer
	|--TextWriter write:往目的地
		|--BufferTextWriter write：往缓冲区写
	|--MediaWriter
		|--BufferMediaWriter
	
想要写一些其他数据。就会子类。DataWriter，为了提高其效率，还要创建该类的子类。BufferDataWriter
Writer
	|--TextWriter write:往目的地
		|--BufferTextWriter write：往缓冲区写
	|--MediaWriter
		|--BufferMediaWriter
	|--DataWriter
		|--BufferDataWriter
		
发现这个体系相当的麻烦。每产生一个子类都要有一个高效的子类。
而且这写高效的子类使用的功能原理都一样，都是缓冲区原理。无论数据是什么。
都是通过缓冲区临时存储提高效率的。
那么，对于这个体系就可以进行优化，因为没有必要让每一个对象都具备相同功能的子类。

哪个对象想要进行效率的提高，只要让缓冲区对其操作即可。也就说，单独将缓冲区进行封装变成对象。

//它的出现为了提高对象的效率。所以必须在创建它的时候先有需要被提高效率的对象
class BufferWriter
{
	[];
	BufferedWriter(Writer w)
	{
	
	}
	/*
	BufferWriter(TextWriter w)
	{
		
	}
	BufferedWriter(MediaWriter w)
	{
		
	}
	*/
}
BufferWriter的出现增强了Writer中的write方法。
但是增强过后，BufferWriter对外提供的还是write方法。只不过是高效的。
所以写的实质没有变，那么BufferWriter也是Writer中的一员。
所以体系就会变成这样。
Writer
	|--TextWriter
	|--MediaWriter
	|--BufferWriter
	|--DataWriter
BufferWriter出现了避免了继承体系关系的臃肿，比继承更为灵活。
如果是为了增强功能，这样方式解决起来更为方便。
所以就把这种优化，总结出来，起个名字：装饰设计模式。

装饰类和被装饰类肯定所属于同一个体系。


既然明确了BufferedReader由来。
我们也可以独立完成缓冲区的建立

原理；
	1，使用流的read方法从源中读取一批数据存储到缓冲区的数组中。
	2，通过计数器记录住存储的元素个数。
	3，通过数组的角标来获取数组中的元素(从缓冲区中取数据).
	4，指针会不断的自增，当增到数组长度，会归0.计数器会自减，当减到0时，就在从源拿一批数据进缓冲区。
	

内容补足：
MyBufferedReader
LineNumberReader ：可以定义行号。
---------
字符流：
FileReader
FileWriter

BufferedReader
BufferedWriter

字节流：
InputStream OutputStream。

操作文件的字节流对象。
FileOutputStream
FileInputStream
BufferedOutputStream
BufferedInputStream


字符流和字节流之间的转换动作。



















